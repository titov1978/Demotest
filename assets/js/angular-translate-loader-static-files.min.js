!function(root,factory){"function"==typeof define&&define.amd?define([],function(){return factory()}):"object"==typeof exports?module.exports=factory():factory()}(this,function(){function $translateStaticFilesLoader($q,$http){"use strict";return function(options){if(!(options&&(angular.isArray(options.files)||angular.isString(options.prefix)&&angular.isString(options.suffix))))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");options.files||(options.files=[{prefix:options.prefix,suffix:options.suffix}]);for(var load=function(file){if(!file||!angular.isString(file.prefix)||!angular.isString(file.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");return $http(angular.extend({url:[file.prefix,options.key,file.suffix].join(""),method:"GET",params:""},options.$http)).then(function(result){return result.data},function(){return $q.reject(options.key)})},promises=[],length=options.files.length,i=0;i<length;i++)promises.push(load({prefix:options.files[i].prefix,key:options.key,suffix:options.files[i].suffix}));return $q.all(promises).then(function(data){for(var length=data.length,mergedData={},i=0;i<length;i++)for(var key in data[i])mergedData[key]=data[i][key];return mergedData})}}return angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",$translateStaticFilesLoader),$translateStaticFilesLoader.$inject=["$q","$http"],$translateStaticFilesLoader.displayName="$translateStaticFilesLoader","pascalprecht.translate"});