!function(window,angular,Hammer){"use strict";function addRecognizer(manager,options){if(!manager||!options||!options.type)return null;var recognizer;return recognizer=options.type.indexOf("pan")>-1?new Hammer.Pan(options):options.type.indexOf("pinch")>-1?new Hammer.Pinch(options):options.type.indexOf("press")>-1?new Hammer.Press(options):options.type.indexOf("rotate")>-1?new Hammer.Rotate(options):options.type.indexOf("swipe")>-1?new Hammer.Swipe(options):new Hammer.Tap(options),manager.add(recognizer),recognizer}function applyManagerOptions(managerOpts,recognizerOpts){return managerOpts&&(recognizerOpts.preventGhosts=managerOpts.preventGhosts),recognizerOpts}function getRecognizerTypeFromeventName(eventName){return eventName.indexOf("pan")>-1?"pan":eventName.indexOf("pinch")>-1?"pinch":eventName.indexOf("press")>-1?"press":eventName.indexOf("rotate")>-1?"rotate":eventName.indexOf("swipe")>-1?"swipe":"tap"}function setupRecognizerWithOptions(manager,options,element){if(manager&&options){var recognizer=manager.get(options.type);recognizer||(recognizer=addRecognizer(manager,options)),options.directions||("pan"===options.type||"swipe"===options.type?options.directions="DIRECTION_ALL":options.type.indexOf("left")>-1?options.directions="DIRECTION_LEFT":options.type.indexOf("right")>-1?options.directions="DIRECTION_RIGHT":options.type.indexOf("up")>-1?options.directions="DIRECTION_UP":options.type.indexOf("down")>-1?options.directions="DIRECTION_DOWN":options.directions=""),options.direction=parseDirections(options.directions),recognizer.set(options),options.recognizeWith&&(manager.get(options.recognizeWith)||addRecognizer(manager,{type:options.recognizeWith}),recognizer.recognizeWith(manager.get(options.recognizeWith))),options.dropRecognizeWith&&manager.get(options.dropRecognizeWith)&&recognizer.dropRecognizeWith(manager.get(options.dropRecognizeWith)),options.requireFailure&&(manager.get(options.requireFailure)||addRecognizer(manager,{type:options.requireFailure}),recognizer.requireFailure(manager.get(options.requireFailure))),options.dropRequireFailure&&manager.get(options.dropRequireFailure)&&recognizer.dropRequireFailure(manager.get(options.dropRequireFailure)),options.preventGhosts&&element&&preventGhosts(element)}}function parseDirections(dirs){var directions=0;return angular.forEach(dirs.split("|"),function(direction){Hammer.hasOwnProperty(direction)&&(directions|=Hammer[direction])}),directions}function preventGhosts(element){function preventGhostClick(ev){for(var i=0;i<coordinates.length;i++){var x=coordinates[i][0],y=coordinates[i][1];if(Math.abs(ev.clientX-x)<threshold&&Math.abs(ev.clientY-y)<threshold){ev.stopPropagation(),ev.preventDefault();break}}}function resetCoordinates(){coordinates=[]}function popCoordinates(){coordinates.splice(0,1)}function registerCoordinates(ev){if(ev.touches.length-ev.changedTouches.length<=0){var touch=ev.changedTouches[0];coordinates.push([touch.clientX,touch.clientY]),setTimeout(popCoordinates,timeout)}}if(element){var coordinates=[],threshold=25,timeout=2500;"ontouchstart"in window&&(element[0].addEventListener("touchstart",resetCoordinates,!0),element[0].addEventListener("touchend",registerCoordinates,!0),element[0].addEventListener("click",preventGhostClick,!0),element[0].addEventListener("mouseup",preventGhostClick,!0))}}if("undefined"==typeof angular)if("undefined"!=typeof require&&require)try{angular=require("angular")}catch(e){return console.log("ERROR: Angular Hammer could not require() a reference to angular")}else{if("undefined"==typeof window.angular)return console.log("ERROR: Angular Hammer could not find or require() a reference to angular");angular=window.angular}if("undefined"==typeof Hammer)if("undefined"!=typeof require&&require)try{Hammer=require("hammerjs")}catch(e){return console.log("ERROR: Angular Hammer could not require() a reference to Hammer")}else{if("undefined"==typeof window.Hammer)return console.log("ERROR: Angular Hammer could not find or require() a reference to Hammer");Hammer=window.Hammer}var gestureTypes=["hmCustom:custom","hmSwipe:swipe","hmSwipeleft:swipeleft","hmSwiperight:swiperight","hmSwipeup:swipeup","hmSwipedown:swipedown","hmPan:pan","hmPanstart:panstart","hmPanmove:panmove","hmPanend:panend","hmPancancel:pancancel","hmPanleft:panleft","hmPanright:panright","hmPanup:panup","hmPandown:pandown","hmPress:press","hmPressup:pressup","hmRotate:rotate","hmRotatestart:rotatestart","hmRotatemove:rotatemove","hmRotateend:rotateend","hmRotatecancel:rotatecancel","hmPinch:pinch","hmPinchstart:pinchstart","hmPinchmove:pinchmove","hmPinchend:pinchend","hmPinchcancel:pinchcancel","hmPinchin:pinchin","hmPinchout:pinchout","hmTap:tap","hmDoubletap:doubletap"];angular.module("hmTouchEvents",[]),angular.forEach(gestureTypes,function(type){var directive=type.split(":"),directiveName=directive[0],eventName=directive[1];angular.module("hmTouchEvents").directive(directiveName,["$parse","$window",function($parse,$window){return{restrict:"A",link:function(scope,element,attrs){if(!Hammer||!$window.addEventListener)return"hmTap"===directiveName&&element.bind("click",handler),void("hmDoubletap"===directiveName&&element.bind("dblclick",handler));var hammer=element.data("hammer"),managerOpts=angular.fromJson(attrs.hmManagerOptions),recognizerOpts=angular.fromJson(attrs.hmRecognizerOptions);hammer||(hammer=new Hammer.Manager(element[0],managerOpts),element.data("hammer",hammer),scope.$on("$destroy",function(){hammer.destroy()}));var handlerName=attrs[directiveName],handlerExpr=$parse(handlerName),handler=function(event){function callHandler(){var fn=handlerExpr(scope,{$event:event});fn&&fn.call(scope,event)}var phase=scope.$root.$$phase,recognizer=hammer.get(event.type);event.element=element,recognizer&&(recognizer.options.preventDefault&&event.preventDefault(),recognizer.options.stopPropagation&&event.srcEvent.stopPropagation()),"$apply"===phase||"$digest"===phase?callHandler():scope.$apply(callHandler)};angular.isArray(recognizerOpts)?angular.forEach(recognizerOpts,function(options){"hmCustom"===directiveName?eventName=options.event:(options.type||(options.type=getRecognizerTypeFromeventName(eventName)),options.event&&delete options.event),("hmCustom"===directiveName||eventName.indexOf(options.type)>-1)&&setupRecognizerWithOptions(hammer,applyManagerOptions(managerOpts,options),element)}):angular.isObject(recognizerOpts)?("hmCustom"===directiveName?eventName=recognizerOpts.event:(recognizerOpts.type||(recognizerOpts.type=getRecognizerTypeFromeventName(eventName)),recognizerOpts.event&&delete recognizerOpts.event),("hmCustom"===directiveName||eventName.indexOf(recognizerOpts.type)>-1)&&setupRecognizerWithOptions(hammer,applyManagerOptions(managerOpts,recognizerOpts),element)):"hmCustom"!==directiveName?(recognizerOpts={type:getRecognizerTypeFromeventName(eventName)},"hmDoubletap"===directiveName&&(recognizerOpts.event=eventName,recognizerOpts.taps=2,hammer.get("tap")&&(recognizerOpts.recognizeWith="tap")),recognizerOpts.type.indexOf("pan")>-1&&hammer.get("swipe")&&(recognizerOpts.recognizeWith="swipe"),recognizerOpts.type.indexOf("pinch")>-1&&hammer.get("rotate")&&(recognizerOpts.recognizeWith="rotate"),setupRecognizerWithOptions(hammer,applyManagerOptions(managerOpts,recognizerOpts),element)):eventName=null,eventName&&hammer.on(eventName,handler)}}}])})}(window,window.angular,window.Hammer);